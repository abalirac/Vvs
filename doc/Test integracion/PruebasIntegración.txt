PRUEBAS DE INTEGRACIÓN
---------------------


PR-IN-01:  PR-UN-14 

*Unidad: 
	ProductService 
	UserService
*Función/método: 
	ProductService (insertAd y findProduct) 
	UserService(registerUser y findUserProfile) PR-UN-07
*Motivación: Al crear un producto se necesita crear un usuario y una categoria,miramos que esta integración funciona bien.
		creamos el producto , lo buscamos y comprobamos que es el que queríamos.
*Entradas: Un usuario , una categoria y un producto.
*Salida esperada: el producto creado es el mismo que el producto que el creado. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-02:   PR-UN-16

*Unidad: 	
	ProductService 
	UserService
*Función/método: 
	ProductService (insertAd , findProduct y findByKeywords) 
	UserService(registerUser y findUserProfile)
*Motivación:  Al crear un producto se necesita crear un usuario y una categoría,miramos que esta integración funciona bien.
		creamos 3 productos , los buscamos por palabras clave null y comprobamos que salen todas queríamos.
*Entradas: Dos usuarios , dos categorías y tres productos.
*Salida esperada: Todos los productos creados. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-03:  PR-UN-17

*Unidad: 	
	ProductService 
	UserService
*Función/método: 
	ProductService (insertAd , findProduct y findByKeywords) 
	UserService(registerUser y findUserProfile)
*Motivación:  Al crear un producto se necesita crear un usuario y una categoría,miramos que esta integración funciona bien.
		creamos los productos , lo buscamos por palabras clave y comprobamos que salen los que queríamos..
*Entradas: Dos usuarios , dos categorías y tres productos.
*Salida esperada: los dos productos que coinciden con la búsqueda. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía. 
	-



PR-IN-04:  PR-UN-18

*Unidad: 	
	ProductService 
	UserService
*Función/método: 
	ProductService (insertAd , findProduct y findByKeywords) 
	UserService(registerUser y findUserProfile)
*Motivación:  Al crear un producto se necesita crear un usuario y una categoría,miramos que esta integración funciona bien.
		creamos los productos, buscamos por categoría y comprobamos que salen los que queríamos..
*Entradas: Dos usuarios , dos categorías y tres productos.
*Salida esperada: El producto que coincide con la categoría buscada. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.

PR-IN-05:  PR-UN-19

*Unidad: 	
	ProductService 
	UserService
*Función/método: 
	ProductService (insertAd , findProduct y findByKeywords) 
	UserService(registerUser y findUserProfile)
*Motivación:  Al crear un producto se necesita crear un usuario y una categoría,miramos que esta integración funciona bien.
		creamos los productos , buscamos por categoría y palabras clave y comprobamos que salen los que queríamos..
*Entradas: Dos usuarios , dos categorías y tres productos.
*Salida esperada: El producto que coincide con la categoría y las palabras claves buscadas. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-06:  PR-UN-20

*Unidad: 	
	ProductService 
	UserService
*Función/método: 
	ProductService (insertAd , findProduct y findByKeywords) 
	UserService(registerUser y findProductsByUser)
*Motivación:  Al crear un producto se necesita crear un usuario y una categoría,miramos que esta integración funciona bien.
		creamos los productos , buscamos los Productos de un usuario y comprobamos que salen los que queríamos..
*Entradas: un usuarios , una categoría y tres productos.
*Salida esperada: los tres productos del usuario productos del usuario.


PR-IN-07: PR-UN-21

*Unidad: 
	userService
	productService
	bidService
*Función/método: 
	userService (registerUser)
	productService (insertAd)
	bidService (makeBid)
*Motivación: Al crear una oferta se necesita crear un usuario y un producto,miramos que esta integración funciona bien.
		creamos una oferta (con su usuario y producto) y buscamos la oferta.
*Entradas: Una categoría , un usuario, un producto y una oferta.
*Salida esperada: La oferta buscada coincide con la creada. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-08:  PR-UN-22

*Unidad: 
	userService
	productService
	bidService
*Función/método: 
	userService (registerUser)
	productService (insertAd)
	bidService (makeBid)
*Motivación: Al crear una oferta se necesita crear un usuario y un producto,miramos que esta integración funciona bien.
		Controlamos que las ofertas no sean menores que la oferta inicial.
*Entradas: Un producto y una oferta con un valor inferior que el que tiene inicialmente el producto.
*Salida esperada: LowBidValueException.  
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-09:  PR-UN-23

*Unidad: 
	userService
	productService
	bidService
*Función/método: 
	userService (registerUser)
	productService (insertAd)
	bidService (makeBid)
*Motivación: Al crear una oferta se necesita crear un usuario y un producto,miramos que esta integración funciona bien.
		 Se hacen dos ofertas(pujas) con valores incrementales.
*Entradas: Un producto y dos pujas.
*Salida esperada: La oferta(puja) ganadora , la de mayor importe. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-10:  PR-UN-24

*Unidad: 
	userService
	productService
	bidService
*Función/método: 
	userService (registerUser)
	productService (insertAd)
	bidService (makeBid)
*Motivación: Al crear una oferta se necesita crear un usuario y un producto,miramos que esta integración funciona bien.
		 Comprobar que se toma la oferta ganadora la más alta aunque no sea la última oferta.
*Entradas: Un producto y dos pujas.
*Salida esperada: La oferta(puja) ganadora , la de mayor importe.
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-11:  PR-UN-25

*Unidad: 
	userService
	productService
	bidService
*Función/método: 
	userService (registerUser)
	productService (insertAd)
	bidService (makeBid)
*Motivación: Al crear una oferta se necesita crear un usuario y un producto,miramos que esta integración funciona bien.
		 Comprobar que un mismo producto no puede estar en dos subastas
*Entradas: Un producto y dos pujas.
*Salida esperada: LowBidValueException. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-12:  PR-UN-27

*Unidad: 
	userService
	productService
	bidService
*Función/método: 
	userService (registerUser)
	productService (insertAd)
	bidService (makeBid)
*Motivación: Al crear una oferta se necesita crear un usuario y un producto,miramos que esta integración funciona bien.
		 Controlar las ofertas efectuadas después de acabar el tiempo de la subasta.
*Entradas: Un producto y una puja.
*Salida esperada: Excepción TimeExpiredException. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-13:   PR-UN-28

*Unidad: 
	userService
	productService
	bidService
*Función/método: 
	userService (registerUser)
	productService (insertAd)
	bidService (makeBid, findBidsByUser)
*Motivación: Al crear una oferta se necesita crear un usuario y un producto,miramos que esta integración funciona bien.
		 Comprobar que funciona la búsqueda de ofertas que hizo un usuario.
*Entradas: un Usuario, una categoria, un producto y dos ofertas del usuario al mismo producto.
*Salida esperada: Todas las ofertas efectuadas por el mismo usuario. 
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía.


PR-IN-14:    PR-UN-29

*Unidad: 
	userService
	productService
	bidService
*Función/método: 
	userService (registerUser)
	productService (insertAd)
	bidService (makeBid)
*Motivación: Al crear una oferta se necesita crear un usuario y un producto,miramos que esta integración funciona bien.
		 Comprobar que funciona las apuestas automáticas.
*Entradas: Dos Usuario, una categoria, un producto y tres ofertas al mismo producto.
*Salida esperada: La ultima puja como ganadora: en la segunda oferta la puja automática hace una puja y en la última oferta ya no puja. 
		
	-
*Inicialización del contexto: Inicialmente la base de datos está vacía. Las apuestas automáticas funcionan cuando se da un valor 
				superior a la apuesta vigente, lo suficientemente alta como para que en la oferta reflejada salga
				que la subió el mínimo a la que estaba pero cuando alguien la intente mejorar, automáticamente se
pujará hasta el valor máximo introducido.


